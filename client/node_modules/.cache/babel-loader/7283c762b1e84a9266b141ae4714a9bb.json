{"ast":null,"code":"import axios from 'axios';\nimport { returnErrors } from './errorActions';\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL } from './types'; // Check token & load user\n\nexport var loadUser = function loadUser() {\n  return function (dispatch, getState) {\n    // User loading\n    dispatch({\n      type: USER_LOADING\n    });\n    axios.get('/api/auth/user', tokenConfig(getState)).then(function (res) {\n      return dispatch({\n        type: USER_LOADED,\n        payload: res.data\n      });\n    }).catch(function (err) {\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({\n        type: AUTH_ERROR\n      });\n    });\n  };\n}; // Register User\n\nexport var register = function register(_ref) {\n  var name = _ref.name,\n      email = _ref.email,\n      password = _ref.password;\n  return function (dispatch) {\n    // Headers\n    var config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }; // Request body\n\n    var body = JSON.stringify({\n      name: name,\n      email: email,\n      password: password\n    });\n    axios.post('/api/users', body, config).then(function (res) {\n      return dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n    }).catch(function (err) {\n      dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    });\n  };\n}; // Login User\n\nexport var login = function login(_ref2) {\n  var email = _ref2.email,\n      password = _ref2.password;\n  return function (dispatch) {\n    // Headers\n    var config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }; // Request body\n\n    var body = JSON.stringify({\n      email: email,\n      password: password\n    });\n    axios.post('/api/auth', body, config).then(function (res) {\n      return dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n      });\n    }).catch(function (err) {\n      dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\n      dispatch({\n        type: LOGIN_FAIL\n      });\n    });\n  };\n}; // Logout User\n\nexport var logout = function logout() {\n  return {\n    type: LOGOUT_SUCCESS\n  };\n}; // Setup config/headers and token\n\nexport var tokenConfig = function tokenConfig(getState) {\n  // Get token from localstorage\n  var token = getState().auth.token; // Headers\n\n  var config = {\n    headers: {\n      'Content-type': 'application/json'\n    }\n  }; // If token, add to headers\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["F:\\aaa\\client\\src\\actions\\authActions.js"],"names":["axios","returnErrors","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","response","status","register","name","email","password","config","headers","body","JSON","stringify","post","login","logout","token","auth"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { returnErrors } from './errorActions';\r\n\r\nimport {\r\n  USER_LOADED,\r\n  USER_LOADING,\r\n  AUTH_ERROR,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT_SUCCESS,\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL\r\n} from './types';\r\n\r\n// Check token & load user\r\nexport const loadUser = () => (dispatch, getState) => {\r\n  // User loading\r\n  dispatch({ type: USER_LOADING });\r\n\r\n  axios\r\n    .get('/api/auth/user', tokenConfig(getState))\r\n    .then(res =>\r\n      dispatch({\r\n        type: USER_LOADED,\r\n        payload: res.data\r\n      })\r\n    )\r\n    .catch(err => {\r\n      dispatch(returnErrors(err.response.data, err.response.status));\r\n      dispatch({\r\n        type: AUTH_ERROR\r\n      });\r\n    });\r\n};\r\n\r\n// Register User\r\nexport const register = ({ name, email, password }) => dispatch => {\r\n  // Headers\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  };\r\n\r\n  // Request body\r\n  const body = JSON.stringify({ name, email, password });\r\n\r\n  axios\r\n    .post('/api/users', body, config)\r\n    .then(res =>\r\n      dispatch({\r\n        type: REGISTER_SUCCESS,\r\n        payload: res.data\r\n      })\r\n    )\r\n    .catch(err => {\r\n      dispatch(\r\n        returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL')\r\n      );\r\n      dispatch({\r\n        type: REGISTER_FAIL\r\n      });\r\n    });\r\n};\r\n\r\n// Login User\r\nexport const login = ({ email, password }) => dispatch => {\r\n  // Headers\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  };\r\n\r\n  // Request body\r\n  const body = JSON.stringify({ email, password });\r\n\r\n  axios\r\n    .post('/api/auth', body, config)\r\n    .then(res =>\r\n      dispatch({\r\n        type: LOGIN_SUCCESS,\r\n        payload: res.data\r\n      })\r\n    )\r\n    .catch(err => {\r\n      dispatch(\r\n        returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL')\r\n      );\r\n      dispatch({\r\n        type: LOGIN_FAIL\r\n      });\r\n    });\r\n};\r\n\r\n// Logout User\r\nexport const logout = () => {\r\n  return {\r\n    type: LOGOUT_SUCCESS\r\n  };\r\n};\r\n\r\n// Setup config/headers and token\r\nexport const tokenConfig = getState => {\r\n  // Get token from localstorage\r\n  const token = getState().auth.token;\r\n\r\n  // Headers\r\n  const config = {\r\n    headers: {\r\n      'Content-type': 'application/json'\r\n    }\r\n  };\r\n\r\n  // If token, add to headers\r\n  if (token) {\r\n    config.headers['x-auth-token'] = token;\r\n  }\r\n\r\n  return config;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}